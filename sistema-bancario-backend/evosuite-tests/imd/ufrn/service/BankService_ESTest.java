/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 11 18:31:29 GMT 2024
 */

package imd.ufrn.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import imd.ufrn.model.Account;
import imd.ufrn.model.BonusAccount;
import imd.ufrn.model.SavingsAccount;
import imd.ufrn.repository.BankRepository;
import imd.ufrn.service.BankService;
import java.util.ConcurrentModificationException;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BankService_ESTest extends BankService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BonusAccount bonusAccount0 = new BonusAccount(1309, (-81.624098), 1309);
      bonusAccount0.setPunctuation((-319));
      bonusAccount0.setBalance(2569.9040219642648);
      bankRepository0.saveAccount(bonusAccount0);
      BankService bankService0 = new BankService(bankRepository0);
      boolean boolean0 = bankService0.realizeTransfer(1309, 1309, 1309);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      BonusAccount bonusAccount0 = new BonusAccount((-2145350942), 2207, 2207);
      bankRepository0.saveAccount(bonusAccount0);
      SavingsAccount savingsAccount0 = new SavingsAccount(2207, 2938.456);
      bankRepository0.saveAccount(savingsAccount0);
      boolean boolean0 = bankService0.realizeTransfer(2207, (-2145350942), 60.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      boolean boolean0 = bankService0.realizeTransfer(2207, 0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      BonusAccount bonusAccount0 = new BonusAccount(0, 1637.778135, (-1077));
      bankRepository0.saveAccount(bonusAccount0);
      double double0 = bankService0.realizeCredit(0, 1637.778135, false);
      assertEquals(3275.55627, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      SavingsAccount savingsAccount0 = new SavingsAccount(2207, 2938.456);
      bankRepository0.saveAccount(savingsAccount0);
      // Undeclared exception!
      try { 
        bankService0.realizeTransfer(2207, (-2145350942), 60.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("imd.ufrn.service.BankService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      boolean boolean0 = bankService0.createAccount(0, 3, 537.44067);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      boolean boolean0 = bankService0.createAccount(0, 224, 150.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      boolean boolean0 = bankService0.createAccount(418, (-2399), (-2399));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      boolean boolean0 = bankService0.createAccount((-1), 1, 2779.3563984);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      SavingsAccount savingsAccount0 = new SavingsAccount(0, (-3059.4032852));
      bankRepository0.saveAccount(savingsAccount0);
      double double0 = bankService0.realizeCredit(0, 0.0, true);
      assertEquals((-3059.4032852), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      BonusAccount bonusAccount0 = new BonusAccount(0, 0, 3664);
      bankRepository0.saveAccount(bonusAccount0);
      Account account0 = bankService0.getAccountByNumber(0);
      assertSame(account0, bonusAccount0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      BonusAccount bonusAccount0 = new BonusAccount(0, 908.0053177899, 1);
      bankRepository0.saveAccount(bonusAccount0);
      BonusAccount bonusAccount1 = (BonusAccount)bankService0.getAccountByNumber(0);
      assertEquals(1, bonusAccount1.getPunctuation());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      Account account0 = new Account(31, (-825.2753355));
      bankRepository0.saveAccount(account0);
      BankService bankService0 = new BankService(bankRepository0);
      Account account1 = bankService0.getAccountByNumber(31);
      assertSame(account1, account0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      BonusAccount bonusAccount0 = new BonusAccount((-1), (-1.0), (-1));
      bankRepository0.saveAccount(bonusAccount0);
      Account account0 = bankService0.getAccountByNumber((-1));
      assertEquals((-1), account0.getAccountNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      Account account0 = new Account(0, 0);
      bankRepository0.saveAccount(account0);
      BankService bankService0 = new BankService(bankRepository0);
      double double0 = bankService0.checkBalance(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      Account account0 = new Account(0, 475.718);
      bankRepository0.saveAccount(account0);
      BankService bankService0 = new BankService(bankRepository0);
      double double0 = bankService0.checkBalance(0);
      assertEquals(475.718, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      SavingsAccount savingsAccount0 = new SavingsAccount((-10), (-10));
      bankRepository0.saveAccount(savingsAccount0);
      double double0 = bankService0.checkBalance((-10));
      assertEquals((-10.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      // Undeclared exception!
      try { 
        bankService0.realizeDebit((-2147483645), 2207);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("imd.ufrn.service.BankService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      SavingsAccount savingsAccount0 = new SavingsAccount(2207, 2938.456);
      bankRepository0.saveAccount(savingsAccount0);
      SavingsAccount savingsAccount1 = new SavingsAccount(60, 60);
      bankRepository0.saveAccount(savingsAccount1);
      savingsAccount1.setAccountNumber(483);
      // Undeclared exception!
      try { 
        bankService0.payFees(4123.625955261);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BankService bankService0 = new BankService((BankRepository) null);
      // Undeclared exception!
      try { 
        bankService0.payFees(100.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("imd.ufrn.service.BankService", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BankService bankService0 = new BankService((BankRepository) null);
      // Undeclared exception!
      try { 
        bankService0.getAccountByNumber((-1882));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("imd.ufrn.service.BankService", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BankService bankService0 = new BankService((BankRepository) null);
      // Undeclared exception!
      try { 
        bankService0.createAccount(1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("imd.ufrn.service.BankService", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      BonusAccount bonusAccount0 = new BonusAccount(0, 1.0, 31);
      bankRepository0.saveAccount(bonusAccount0);
      double double0 = bankService0.realizeCredit(0, 1189.0222609052, true);
      assertEquals(1190.0222609052, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      Account account0 = new Account(45, 45);
      bankRepository0.saveAccount(account0);
      Optional<Double> optional0 = bankService0.realizeDebit(45, 45.0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      Account account0 = new Account(0, 0);
      bankRepository0.saveAccount(account0);
      bankService0.payFees(0.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      SavingsAccount savingsAccount0 = new SavingsAccount(54, 54);
      bankRepository0.saveAccount(savingsAccount0);
      bankService0.realizeDebit(54, 54);
      boolean boolean0 = bankService0.realizeTransfer(54, 54, 54);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      boolean boolean0 = bankService0.realizeTransfer((-33), (-33), (-33));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BonusAccount bonusAccount0 = new BonusAccount(0, 0, 0);
      bankRepository0.saveAccount(bonusAccount0);
      BankService bankService0 = new BankService(bankRepository0);
      double double0 = bankService0.realizeCredit(0, 0, false);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      // Undeclared exception!
      try { 
        bankService0.realizeCredit((-5), (-5), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("imd.ufrn.service.BankService", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      SavingsAccount savingsAccount0 = new SavingsAccount(1668, 1668);
      bankRepository0.saveAccount(savingsAccount0);
      BankService bankService0 = new BankService(bankRepository0);
      bankService0.payFees((-148.036));
      Optional<Double> optional0 = bankService0.realizeDebit(1668, 0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BonusAccount bonusAccount0 = new BonusAccount(0, 0, 0);
      bankRepository0.saveAccount(bonusAccount0);
      BankService bankService0 = new BankService(bankRepository0);
      Optional<Double> optional0 = bankService0.realizeDebit(0, (-316));
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      bankService0.createAccount(3, 3, 3);
      Optional<Double> optional0 = bankService0.realizeDebit(3, 3);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      boolean boolean0 = bankService0.createAccount((-33), 2, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      boolean boolean0 = bankService0.createAccount(1, 1, 1);
      assertTrue(boolean0);
      
      boolean boolean1 = bankService0.realizeTransfer(1, 1, 1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      Account account0 = bankService0.getAccountByNumber(0);
      assertNull(account0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BankRepository bankRepository0 = new BankRepository();
      BankService bankService0 = new BankService(bankRepository0);
      // Undeclared exception!
      try { 
        bankService0.checkBalance(45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("imd.ufrn.service.BankService", e);
      }
  }
}
